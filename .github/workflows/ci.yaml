name: Continuous Integration

env:
  REGISTRY: ghcr.io
  TEST_IMAGE_LABEL_NAME: "test_publish"
  GITHUB_TOKEN: ${{ github.token }}
  GITHUB_OWNER_TYPE: ${{github.event.repository.owner.type == 'User' && 'user' || 'org'}}

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - reopened
      - synchronize

  release:
    types:
      - released

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{github.ref}}

jobs:
  foo:
    runs-on: ubuntu-latest
    name: "Foo"
    steps:
      - name: Check out this repository
        uses: actions/checkout@v4
        with:
          path: this

      - name: Check out hassos-addons repository
        uses: actions/checkout@v4
        with:
          repository: echocat/hassos-addons
          path: hassos-addons
          ref: main
          token: ${{ secrets.HASSOS_ADDONS_REPO }}

      - name: Adjust hassos-addons
        env:
          PROJECT: duplicati
        run: |
          set -ex
          cd "$GITHUB_WORKSPACE/hassos-addons"

          source=$GITHUB_WORKSPACE/this
          target=$GITHUB_WORKSPACE/hassos-addons/${PROJECT}
          rm -rf "${target}"
          cp -R "${source}/" "${target}/"
          ls -la "${target}"
          ref=$(echo "${{ github.ref_name }}" | sed -E "s/^v([0-9]+(\.[0-9]+)*)(-.+)?$/\1/")
          refEscaped=$(echo "$ref" | sed -E 's/\\/\\\\/' | sed -E 's/\//\\\//')
          sed -i -E "s/^(version: ).+$/\1${refEscaped}/" "${target}/config.yaml"
          if grep -q '^image: ' "${target}/config.yaml"; then
            sed -i -E "s/^(image: ).+$/\1ghcr.io/echocat/hassos-addon-duplicati/" "${target}/config.yaml"
          else
            echo "image: ghcr.io/echocat/hassos-addon-duplicati" >> "${target}/config.yaml"
          fi
          
          git add -A "${target}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Release announcement of ${PROJECT}:${ref}"
          git push origin main

  resolve:
    runs-on: ubuntu-latest
    name: "Resolve"
    outputs:
      registry: ${{ steps.refs.outputs.registry }}
      image: ${{ steps.refs.outputs.image }}
      imageTag: ${{ steps.refs.outputs.imageTag }}
      push: ${{ steps.refs.outputs.push }}
      platforms: ${{ steps.refs.outputs.platforms }}
      annotations: ${{ steps.refs.outputs.annotations }}
      annotationsArgs: ${{ steps.refs.outputs.annotationsArgs }}
      duplicatRelease: ${{ steps.refs.outputs.duplicatRelease }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache-dependency-path: |
            go.sum

      - name: Execute
        id: refs
        run: go run ./build resolve "${{ github.ref_name }}" "${{ github.event_name }}" "${{ github.event.number }}"

  build:
    runs-on: ubuntu-latest
    name: Build ${{ matrix.platform }}
    needs:
      - resolve
    strategy:
      matrix:
        platform:  ${{ fromJson(needs.resolve.outputs.platforms) }}
    permissions:
      pull-requests: read
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache-dependency-path: |
            go.sum

      - name: Prepare
        id: refs
        run: go run ./build resolve-build "${{ matrix.platform }}" "${{ github.ref_name }}" "${{ github.event_name }}" "${{ github.event.number }}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.refs.outputs.image }}
          labels: ${{ steps.refs.outputs.labels }}
          tags: |
            type=sha
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.resolve.outputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "."
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DUPLICATI_RELEASE=${{ needs.resolve.outputs.duplicatRelease }}
          outputs: "type=image,name=${{ needs.resolve.outputs.image }},push-by-digest=${{ needs.resolve.outputs.push }},name-canonical=true,push=${{ needs.resolve.outputs.push }}"

      - name: Export image digest
        if: needs.resolve.outputs.push == 'true'
        run: |
          mkdir -p "${{ runner.temp }}/digests"
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload image digest
        if: needs.resolve.outputs.push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.refs.outputs.platformToken }}
          path: "${{ runner.temp }}/digests/*"
          if-no-files-found: error
          retention-days: 1

  merge:
    name: "Merge"
    runs-on: ubuntu-latest
    needs:
      - resolve
      - build
    if: needs.resolve.outputs.push == 'true'
    steps:
      - name: Download image digests
        uses: actions/download-artifact@v4
        with:
          path: "${{ runner.temp }}/digests"
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.resolve.outputs.image }}
          tags: |
            type=sha
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.resolve.outputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: "${{ runner.temp }}/digests"
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ needs.resolve.outputs.annotationsArgs }} \
            $(printf '${{ needs.resolve.outputs.image }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ needs.resolve.outputs.image }}:${{ steps.meta.outputs.version }}

  announce:
    name: Announce changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - resolve
      - build
      - merge
    if: ${{ github.event_name == 'release' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Update files
        run: |
          set -ex
          ref=$(echo "${{ github.ref_name }}" | sed -E "s/^v([0-9]+(\.[0-9]+)*)(-.+)?$/\1/")
          sed -i -E "s/^(version: ).+$/\1${ref}/" "config.yaml"
          git add "config.yaml"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Release announcement of ${ref}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.head_ref }}
